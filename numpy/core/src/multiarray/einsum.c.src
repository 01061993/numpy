/*
 * This file contains the implementation of the 'einsum' function,
 * which provides an einstein-summation operation.
 *
 * Copyright (c) 2011 by Mark Wiebe (mwwiebe@gmail.com)
 * The Univerity of British Columbia
 *
 * See LICENSE.txt for the license.
 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"

#define _MULTIARRAYMODULE
#include <numpy/ndarrayobject.h>

#include <ctype.h>

typedef enum {
    BROADCAST_LEFT,
    BROADCAST_RIGHT,
    BROADCAST_MIDDLE
} EINSUM_BROADCAST;

/*
 * Parses the subscripts for one operand into an output
 * of 'ndim' labels
 */
static int
parse_operand_subscripts(char *subscripts, int length,
                        int ndim,
                        int iop, char *out_labels,
                        char *out_label_counts,
                        int *out_min_label,
                        int *out_max_label,
                        int *out_num_labels,
                        EINSUM_BROADCAST *out_broadcast)
{
    int i, idim, ndim_left, label;
    int left_labels = 0, right_labels = 0;

    printf("Parsing operand %d subscripts\n", iop);

    /* Process the labels from the end until the ellipsis */
    idim = ndim-1;
    for (i = length-1; i >= 0; --i) {
        printf("after ellipsis i = %d\n", i);
        label = subscripts[i];
        /* A label for an axis */
        if (label > 0 && isalpha(label)) {
            if (idim >= 0) {
                out_labels[idim--] = label;
                /* Calculate the min and max labels */
                if (label < *out_min_label) {
                    *out_min_label = label;
                }
                if (label > *out_max_label) {
                    *out_max_label = label;
                }
                /* If it's the first time we see this label, count it */
                if (out_label_counts[label] == 0) {
                    (*out_num_labels)++;
                }
                out_label_counts[label]++;
                right_labels = 1;
            }
            else {
                PyErr_Format(PyExc_ValueError,
                            "einstein sum subscripts string contains "
                            "too many subscripts for operand %d", iop);
                return 0;
            }
        }
        /* The end of the ellipsis */
        else if (label == '.') {
            /* A valid ellipsis */
            if (i >= 2 && subscripts[i-1] == '.' && subscripts[i-2] == '.') {
                length = i-2;
                break;
            }
            else {
                PyErr_SetString(PyExc_ValueError,
                            "einstein sum subscripts string contains a "
                            "'.' that is not part of an ellipsis ('...')");
                return 0;
                
            }
        }
        else {
            PyErr_Format(PyExc_ValueError,
                        "invalid subscript '%c' in einstein sum "
                        "subscripts string, subscripts must "
                        "be letters", (char)label);
            return 0;
        }
    }
    /* Reduce ndim to just the dimensions left to fill at the beginning */
    ndim_left = idim+1;
    idim = 0;

    /*
     * If we stopped because of an ellipsis, start again from the beginning.
     * The length was truncated to end at the ellipsis in this case.
     */
    if (i > 0) {
        for (i = 0; i < length; ++i) {
            printf("before ellipsis i = %d\n", i);
            label = subscripts[i];
            /* A label for an axis */
            if (label > 0 && isalnum(label)) {
                if (idim < ndim_left) {
                    out_labels[idim++] = label;
                    /* Calculate the min and max labels */
                    if (label < *out_min_label) {
                        *out_min_label = label;
                    }
                    if (label > *out_max_label) {
                        *out_max_label = label;
                    }
                    /* If it's the first time we see this label, count it */
                    if (out_label_counts[label] == 0) {
                        (*out_num_labels)++;
                    }
                    out_label_counts[label]++;
                    left_labels = 1;
                }
                else {
                    PyErr_Format(PyExc_ValueError,
                                "einstein sum subscripts string contains "
                                "too many subscripts for operand %d", iop);
                    return 0;
                }
            }
            else {
                PyErr_Format(PyExc_ValueError,
                            "invalid subscript '%c' in einstein sum "
                            "subscripts string, subscripts must "
                            "be letters", (char)label);
                return 0;
            }
        }
    }

    /* Set the remaining labels to 0 */
    while (idim < ndim_left) {
        out_labels[idim++] = 0;
    }

    /*
     * Find any labels duplicated for this operand, and turn them
     * into negative offets to the axis to merge with.
     */
    for (idim = 0; idim  < ndim-1; ++idim) {
        char *next;
        printf("duplicate check idim = %d\n", idim);
        /* If this is a proper label, find any duplicates of it */
        label = out_labels[idim];
        if (label > 0) {
            /* Search for the next matching label */
            next = (char *)memchr(out_labels+idim+1, label,
                                    ndim-idim-1);
            while (next != NULL) {
                printf("inner check next=%s\n", next);
                /* The offset from next to out_labels[idim] (negative) */
                *next = (out_labels+idim)-next;
                /* Search for the next matching label */
                next = (char *)memchr(next+1, label,
                                        out_labels+ndim-1-next);
            }
        }
    }

    if (left_labels && right_labels) {
        *out_broadcast = BROADCAST_MIDDLE;
    }
    else if (!left_labels) {
        *out_broadcast = BROADCAST_RIGHT;
    }
    else {
        *out_broadcast = BROADCAST_LEFT;
    }

    return 1;
}

/*
 * Parses the subscripts for the output operand into an output
 * that requires 'ndim_broadcast' unlabeled dimensions, returning
 * the number of output dimensions.  Returns -1 if there is an error.
 */
static int
parse_output_subscripts(char *subscripts, int length,
                        int ndim_broadcast,
                        const char *label_counts,
                        char *out_labels,
                        EINSUM_BROADCAST *out_broadcast)
{
    int i, nlabels, label, idim, ndim, ndim_left;
    int left_labels = 0, right_labels = 0;

    /* Count the labels, making sure they're all unique and valid */
    nlabels = 0;
    for (i = 0; i < length; ++i) {
        label = subscripts[i];
        if (label > 0 && isalpha(label)) {
            /* Check if it occurs again */
            if (memchr(subscripts+i+1, label, length-i-1) == NULL) {
                /* Check that it was used in the inputs */
                if (label_counts[label] == 0) {
                    PyErr_Format(PyExc_ValueError,
                            "einstein sum subscripts string included "
                            "output subscript '%c' which never appeared "
                            "in an input", (char)label);
                    return -1;
                }

                nlabels++;
            }
            else {
                PyErr_Format(PyExc_ValueError,
                        "einstein sum subscripts string includes "
                        "output subscript '%c' multiple times",
                        (char)label);
                return -1;
            }
        }
        else if (label != '.') {
            PyErr_Format(PyExc_ValueError,
                        "invalid subscript '%c' in einstein sum "
                        "subscripts string, subscripts must "
                        "be letters", (char)label);
            return -1;
        }
    }

    /* The number of output dimensions */
    ndim = ndim_broadcast + nlabels;

    /* Process the labels from the end until the ellipsis */
    idim = ndim-1;
    for (i = length-1; i >= 0; --i) {
        label = subscripts[i];
        /* A label for an axis */
        if (label != '.') {
            if (idim >= 0) {
                out_labels[idim--] = label;
            }
            else {
                PyErr_Format(PyExc_ValueError,
                            "einstein sum subscripts string contains "
                            "too many output subscripts");
                return -1;
            }
            right_labels = 1;
        }
        /* The end of the ellipsis */
        else {
            /* A valid ellipsis */
            if (i >= 2 && subscripts[i-1] == '.' && subscripts[i-2] == '.') {
                length = i-2;
                break;
            }
            else {
                PyErr_SetString(PyExc_ValueError,
                            "einstein sum subscripts string contains a "
                            "'.' that is not part of an ellipsis ('...')");
                return -1;
                
            }
        }
    }
    /* Reduce ndim to just the dimensions left to fill at the beginning */
    ndim_left = idim+1;
    idim = 0;

    /*
     * If we stopped because of an ellipsis, start again from the beginning.
     * The length was truncated to end at the ellipsis in this case.
     */
    if (i > 0) {
        for (i = 0; i < length; ++i) {
            label = subscripts[i];
            /* A label for an axis */
            if (label != '.') {
                if (idim < ndim_left) {
                    out_labels[idim++] = label;
                }
                else {
                    PyErr_Format(PyExc_ValueError,
                                "einstein sum subscripts string contains "
                                "too many subscripts for the output");
                    return -1;
                }
                left_labels = 1;
            }
            else {
                PyErr_SetString(PyExc_ValueError,
                            "einstein sum subscripts string contains a "
                            "'.' that is not part of an ellipsis ('...')");
                return -1;
            }
        }
    }

    /* Set the remaining output labels to 0 */
    while (idim < ndim_left) {
        out_labels[idim++] = 0;
    }

    if (left_labels && right_labels) {
        *out_broadcast = BROADCAST_MIDDLE;
    }
    else if (!left_labels) {
        *out_broadcast = BROADCAST_RIGHT;
    }
    else {
        *out_broadcast = BROADCAST_LEFT;
    }

    return ndim;
}


/*
 * When there's just one operand and no reduction, we
 * can return a view into op.  This calculates the view
 * if possible.
 */
static int
get_single_op_view(PyArrayObject *op, int  iop, char *labels,
                   int ndim_output, char *output_labels,
                   PyArrayObject **ret)
{
    npy_intp new_strides[NPY_MAXDIMS];
    npy_intp new_dims[NPY_MAXDIMS];
    char *out_label;
    int label, i, idim, ndim, ibroadcast = 0;

    ndim = PyArray_NDIM(op);

    /* Initialize the dimensions and strides to zero */
    for (idim = 0; idim < ndim_output; ++idim) {
        new_dims[idim] = 0;
        new_strides[idim] = 0;
    }

    /* Match the labels in the operand with the output labels */
    for (idim = 0; idim < ndim; ++idim) {
        printf("Matching label for dimension %d\n", idim);
        label = labels[idim];
        /* If this label says to merge axes, get the actual label */
        if (label < 0) {
            label = labels[idim+label];
        }
        /* If the label is 0, it's an unlabeled broadcast dimension */
        if (label == 0) {
            /* The next output label that's a broadcast dimension */
            for (; ibroadcast < ndim_output; ++ibroadcast) {
                if (output_labels[ibroadcast] == 0) {
                    break;
                }
            }
            if (ibroadcast == ndim_output) {
                PyErr_SetString(PyExc_ValueError,
                        "output had too few broadcast dimensions");
                return 0;
            }
            new_dims[ibroadcast] = PyArray_DIM(op, idim);
            new_strides[ibroadcast] = PyArray_STRIDE(op, idim);
            ++ibroadcast;
        }
        else {
            /* Find the position for this dimension in the output */
            out_label = (char *)memchr(output_labels, label,
                                                    ndim_output);
            /* If it's not found, reduction -> can't return a view */
            if (out_label == NULL) {
                break;
            }
            /* Update the dimensions and strides of the output */
            i = out_label - output_labels;
            if (new_dims[i] != 0 &&
                    new_dims[i] != PyArray_DIM(op, idim)) {
                PyErr_Format(PyExc_ValueError,
                        "dimensions in operand %d for collapsing "
                        "index '%c' don't match (%d != %d)",
                        iop, label, (int)new_dims[i],
                        (int)PyArray_DIM(op, idim));
                return 0;
            }
            new_dims[i] = PyArray_DIM(op, idim);
            new_strides[i] += PyArray_STRIDE(op, idim);
        }
    }
    /* If we processed all the input axes, return a view */
    if (idim == ndim) {
        printf("Returning a view\n");
        Py_INCREF(PyArray_DESCR(op));
        *ret = (PyArrayObject *)PyArray_NewFromDescr(
                                Py_TYPE(op),
                                PyArray_DESCR(op),
                                ndim_output, new_dims, new_strides,
                                PyArray_DATA(op),
                                0, (PyObject *)op);

        if (*ret == NULL) {
            return 0;
        }
        if (!PyArray_Check(*ret)) {
            Py_DECREF(*ret);
            *ret = NULL;
            PyErr_SetString(PyExc_RuntimeError,
                        "NewFromDescr failed to return an array");
            return 0;
        }
        PyArray_UpdateFlags(*ret,
                    NPY_C_CONTIGUOUS|NPY_ALIGNED|NPY_F_CONTIGUOUS);
        Py_INCREF(op);
        PyArray_BASE(*ret) = (PyObject *)op;
        return 1;
    }

    /* Return success, but that we couldn't make a view */
    *ret = NULL;
    return 1;
}

static PyArrayObject *
get_combined_dims_view(PyArrayObject *op, int iop, char *labels)
{
    npy_intp new_strides[NPY_MAXDIMS];
    npy_intp new_dims[NPY_MAXDIMS];
    int i, idim, ndim, icombine, combineoffset, label;
    int icombinemap[NPY_MAXDIMS];

    PyArrayObject *ret = NULL;

    ndim = PyArray_NDIM(op);

    /* Initialize the dimensions and strides to zero */
    for (idim = 0; idim < ndim; ++idim) {
        new_dims[idim] = 0;
        new_strides[idim] = 0;
    }

    /* Copy the dimensions and strides, except when collapsing */
    icombine = 0;
    for (idim = 0; idim < ndim; ++idim) {
        printf("Processing dimension %d\n", idim);
        label = labels[idim];
        /* If this label says to merge axes, get the actual label */
        if (label < 0) {
            combineoffset = label;
            label = labels[idim+label];
        }
        else {
            combineoffset = 0;
            if (icombine != idim) {
                labels[icombine] = labels[idim];
            }
            icombinemap[idim] = icombine;
        }
        /* If the label is 0, it's an unlabeled broadcast dimension */
        if (label == 0) {
            new_dims[icombine] = PyArray_DIM(op, idim);
            new_strides[icombine] = PyArray_STRIDE(op, idim);
        }
        else {
            /* Update the combined axis dimensions and strides */
            i = idim + combineoffset;
            if (combineoffset < 0 &&
                        new_dims[i] != PyArray_DIM(op, idim)) {
                PyErr_Format(PyExc_ValueError,
                        "dimensions in operand %d for collapsing "
                        "index '%c' don't match (%d != %d)",
                        iop, label, (int)new_dims[i],
                        (int)PyArray_DIM(op, idim));
                return NULL;
            }
            i = icombinemap[i];
            new_dims[i] = PyArray_DIM(op, idim);
            new_strides[i] += PyArray_STRIDE(op, idim);
        }

        /* If the label didn't say to combine axes, increment dest i */
        if (combineoffset == 0) {
            icombine++;
        }
    }

    /* The compressed number of dimensions */
    ndim = icombine;

    Py_INCREF(PyArray_DESCR(op));
    ret = (PyArrayObject *)PyArray_NewFromDescr(
                            Py_TYPE(op),
                            PyArray_DESCR(op),
                            ndim, new_dims, new_strides,
                            PyArray_DATA(op),
                            PyArray_ISWRITEABLE(op) ? NPY_WRITEABLE : 0,
                            (PyObject *)op);

    if (ret == NULL) {
        return NULL;
    }
    if (!PyArray_Check(ret)) {
        Py_DECREF(ret);
        PyErr_SetString(PyExc_RuntimeError,
                    "NewFromDescr failed to return an array");
        return NULL;
    }
    PyArray_UpdateFlags(ret,
                NPY_C_CONTIGUOUS|NPY_ALIGNED|NPY_F_CONTIGUOUS);
    Py_INCREF(op);
    PyArray_BASE(ret) = (PyObject *)op;

    return ret;
}

static int
prepare_op_axes(int ndim, int iop, char *labels, npy_intp *axes,
            npy_intp ndim_iter, char *iter_labels, EINSUM_BROADCAST broadcast)
{
    int i, label, ibroadcast;

    /* Regular broadcasting */
    if (broadcast == BROADCAST_RIGHT) {
        /* broadcast dimensions get placed in rightmost position */
        ibroadcast = ndim-1; 
        for (i = ndim_iter-1; i >= 0; --i) {
            label = iter_labels[i];
            /*
             * If it's an unlabeled broadcast dimension, choose
             * the next broadcast dimension from the operand.
             */
            if (label == 0) {
                while (ibroadcast >= 0 && labels[ibroadcast] != 0) {
                    --ibroadcast;
                }
                /*
                 * If we used up all the operand broadcast dimensions,
                 * extend it with a "newaxis"
                 */
                if (ibroadcast < 0) {
                    axes[i] = -1;
                }
                /* Otherwise map to the broadcast axis */
                else {
                    axes[i] = ibroadcast;
                }
            }
            /* It's a labeled dimension, find the matching one */
            else {
                char *match = memchr(labels, label, ndim);
                /* If the op doesn't have the label, broadcast it */
                if (match == NULL) {
                    axes[i] = -1;
                }
                /* Otherwise use it */
                else {
                    axes[i] = match - labels;
                }
            }
        }
    }
    /* Reverse broadcasting */
    else if (broadcast == BROADCAST_LEFT) {
        /* broadcast dimensions get placed in leftmost position */
        ibroadcast = 0; 
        for (i = 0; i < ndim_iter; ++i) {
            label = iter_labels[i];
            /*
             * If it's an unlabeled broadcast dimension, choose
             * the next broadcast dimension from the operand.
             */
            if (label == 0) {
                while (ibroadcast < ndim && labels[ibroadcast] != 0) {
                    ++ibroadcast;
                }
                /*
                 * If we used up all the operand broadcast dimensions,
                 * extend it with a "newaxis"
                 */
                if (ibroadcast >= ndim) {
                    axes[i] = -1;
                }
                /* Otherwise map to the broadcast axis */
                else {
                    axes[i] = ibroadcast;
                }
            }
            /* It's a labeled dimension, find the matching one */
            else {
                char *match = memchr(labels, label, ndim);
                /* If the op doesn't have the label, broadcast it */
                if (match == NULL) {
                    axes[i] = -1;
                }
                /* Otherwise use it */
                else {
                    axes[i] = match - labels;
                }
            }
        }
    }
    /* Middle broadcasting */
    else {
        /* broadcast dimensions get placed in leftmost position */
        ibroadcast = 0; 
        for (i = 0; i < ndim_iter; ++i) {
            label = iter_labels[i];
            /*
             * If it's an unlabeled broadcast dimension, choose
             * the next broadcast dimension from the operand.
             */
            if (label == 0) {
                while (ibroadcast < ndim && labels[ibroadcast] != 0) {
                    ++ibroadcast;
                }
                /*
                 * If we used up all the operand broadcast dimensions,
                 * it's an error
                 */
                if (ibroadcast >= ndim) {
                    PyErr_Format(PyExc_ValueError,
                            "operand %d did not have enough dimensions "
                            "to match the broadcasting, and couldn't be "
                            "extended because einstein sum subscripts "
                            "were specified at both the start and end",
                            iop);
                    return 0;
                }
                /* Otherwise map to the broadcast axis */
                else {
                    axes[i] = ibroadcast;
                }
            }
            /* It's a labeled dimension, find the matching one */
            else {
                char *match = memchr(labels, label, ndim);
                /* If the op doesn't have the label, broadcast it */
                if (match == NULL) {
                    axes[i] = -1;
                }
                /* Otherwise use it */
                else {
                    axes[i] = match - labels;
                }
            }
        }
    }

    return 1;
}


/*NUMPY_API
 * This function provides summation of array elements according to
 * the Einstein summation convention.  For example:
 *  - trace(a)        -> einsum("ii", a)
 *  - transpose(a)    -> einsum("ji", a)
 *  - multiply(a,b)   -> einsum(",", a, b)
 *  - inner(a,b)      -> einsum("i,i", a, b)
 *  - outer(a,b)      -> einsum("i,j", a, b)
 *  - matvec(a,b)     -> einsum("ij,j", a, b)
 *  - matmat(a,b)     -> einsum("ij,jk", a, b)
 *
 * subscripts: The string of subscripts for einstein summation.
 * nop:        The number of operands
 * op_in:      The array of operands
 * dtype:      Either NULL, or the data type to force the calculation as.
 * order:      The order for the calculation/the output axes.
 * casting:    What kind of casts should be permitted.
 * out:        Either NULL, or an array into which the output should be placed.
 *
 * By default, the labels get placed in alphabetical order
 * at the end of the output. So, if c = einsum("i,j", a, b)
 * then c[i,j] == a[i]*b[j], but if c = einsum("j,i", a, b)
 * then c[i,j] = a[j]*b[i].
 *
 * Alternatively, you can control the output order or prevent
 * an axis from being summed/force an axis to be summed by providing
 * indices for the output. This allows us to turn 'trace' into
 * 'diag', for example.
 *  - diag(a)         -> einsum("ii->i", a)
 *  - sum(a, axis=0)  -> einsum("i...->", a)
 *
 * Subscripts at the beginning and end may be specified by
 * putting an ellipsis "..." in the middle.  For example,
 * the function einsum("i...i", a) takes the diagonal of
 * the first and last dimensions of the operand, and
 * einsum("ij...,jk...->ik...") takes the matrix product using
 * the first two indices of each operand instead of the last two.
 *
 * When there is only one operand, no axes being summed, and
 * no output parameter, this function returns a view
 * into the operand instead of making a copy.
 */
NPY_NO_EXPORT PyArrayObject *
PyArray_EinsteinSum(char *subscripts, npy_intp nop,
                    PyArrayObject **op_in,
                    PyArray_Descr *dtype,
                    NPY_ORDER order, NPY_CASTING casting,
                    PyArrayObject *out)
{
    int iop, label, min_label = 127, max_label = 0, num_labels;
    char label_counts[128];
    char op_labels[NPY_MAXARGS][NPY_MAXDIMS];
    char output_labels[NPY_MAXDIMS], *iter_labels;
    int idim, ndim_output, ndim_broadcast, ndim_iter;

    EINSUM_BROADCAST broadcast[NPY_MAXARGS];
    PyArrayObject *op[NPY_MAXARGS], *ret = NULL;
    PyArray_Descr *op_dtypes_array[NPY_MAXARGS], **op_dtypes;

    npy_intp op_axes_arrays[NPY_MAXARGS][NPY_MAXDIMS];
    npy_intp *op_axes[NPY_MAXARGS];
    npy_uint32 op_flags[NPY_MAXARGS];

    NpyIter *iter;

    /* nop+1 (+1 is for the output) must fit in NPY_MAXARGS */
    if (nop >= NPY_MAXARGS) {
        PyErr_SetString(PyExc_ValueError,
                    "too many operands provided to einstein sum function");
        return NULL;
    }
    else if (nop < 1) {
        PyErr_SetString(PyExc_ValueError,
                    "not enough operands provided to einstein sum function");
        return NULL;
    }

    /* Parse the subscripts string into label_counts and op_labels */
    printf("Parsing input subscripts\n");
    memset(label_counts, 0, sizeof(label_counts));
    num_labels = 0;
    for (iop = 0; iop < nop; ++iop) {
        int length = (int)strcspn(subscripts, ",-");

        if (iop == nop-1 && subscripts[length] == ',') {
            PyErr_SetString(PyExc_ValueError,
                        "more operands provided to einstein sum function "
                        "than specified in the subscripts string");
            return NULL;
        }
        else if(iop < nop-1 && subscripts[length] != ',') {
            PyErr_SetString(PyExc_ValueError,
                        "fewer operands provided to einstein sum function "
                        "than specified in the subscripts string");
            return NULL;
        }

        if (!parse_operand_subscripts(subscripts, length,
                        PyArray_NDIM(op_in[iop]),
                        iop, op_labels[iop], label_counts,
                        &min_label, &max_label, &num_labels,
                        &broadcast[iop])) {
            return NULL;
        }
        
        /* Move subscripts to the start of the labels for the next op */
        subscripts += length;
        if (iop < nop-1) {
            subscripts++;
        }
    }

    /*
     * Find the number of broadcast dimensions, which is the maximum
     * number of labels == 0 in an op_labels array.
     */
    ndim_broadcast = 0;
    for (iop = 0; iop < nop; ++iop) {
        npy_intp count_zeros = 0;
        int ndim;
        char *labels = op_labels[iop];

        ndim = PyArray_NDIM(op_in[iop]);
        for (idim = 0; idim < ndim; ++idim) {
            if (labels[idim] == 0) {
                ++count_zeros;
            }
        }

        if (count_zeros > ndim_broadcast) {
            ndim_broadcast = count_zeros;
        }
    }

    /*
     * If there is no output signature, create one using each label
     * that appeared once, in alphabetical order
     */
    printf("Parsing output subscripts\n");
    if (subscripts[0] == '\0') {
        char outsubscripts[NPY_MAXDIMS];
        int length = 0;
        for (label = min_label; label <= max_label; ++label) {
            if (label_counts[label] == 1) {
                if (length < NPY_MAXDIMS-1) {
                    outsubscripts[length++] = label;
                }
                else {
                    PyErr_SetString(PyExc_ValueError,
                                "einstein sum subscript string has too many "
                                "distinct labels");
                    return NULL;
                }
            }
        }
        /* Parse the output subscript string */
        ndim_output = parse_output_subscripts(outsubscripts, length,
                                        ndim_broadcast, label_counts,
                                        output_labels, &broadcast[nop]);
    }
    else {
        if (subscripts[0] != '-' || subscripts[1] != '>') {
            PyErr_SetString(PyExc_ValueError,
                        "einstein sum subscript string does not "
                        "contain proper '->' output specified");
            return NULL;
        }
        subscripts += 2;

        /* Parse the output subscript string */
        ndim_output = parse_output_subscripts(subscripts, strlen(subscripts),
                                        ndim_broadcast, label_counts,
                                        output_labels, &broadcast[nop]);
    }
    if (ndim_output < 0) {
        return NULL;
    }

    if (out != NULL && PyArray_NDIM(out) != ndim_output) {
        PyErr_Format(PyExc_ValueError,
                "out parameter does not have the correct number of "
                "dimensions, has %d but should have %d",
                (int)PyArray_NDIM(out), (int)ndim_output);
        return NULL;
    }

    /* Set all the op references to NULL */
    for (iop = 0; iop < nop; ++iop) {
        op[iop] = NULL;
    }

    /*
     * Process all the input ops, combining dimensions into their
     * diagonal where specified.
     */
    printf("Processing inputs\n");
    for (iop = 0; iop < nop; ++iop) {
        char *labels = op_labels[iop];
        int combine, ndim;

        ndim = PyArray_NDIM(op_in[iop]);

        /*
         * If there's just one operand and no output parameter,
         * first try remapping the axes to the output to return
         * a view instead of a copy.
         */
        if (iop == 0 && nop == 1 && out == NULL) {
            PyArrayObject *ret = NULL;

            if (!get_single_op_view(op_in[iop], iop, labels,
                                    ndim_output, output_labels,
                                    &ret)) {
                return NULL;
            }
            if (ret != NULL) {
                return ret;
            }
        }

        /* Check whether any dimensions need to be combined */
        combine = 0;
        for (idim = 0; idim < ndim; ++idim) {
            if (labels[idim] < 0) {
                combine = 1;
            }
        }

        /* If any dimensions are combined, create a view which combines them */
        if (combine) {
            op[iop] = get_combined_dims_view(op_in[iop], iop, labels);
            if (op[iop] == NULL) {
                goto fail;
            }
        }
        /* No combining needed */
        else {
            Py_INCREF(op_in[iop]);
            op[iop] = op_in[iop];
        }
    }

    /* Set the output op */
    op[nop] = out;

    /*
     * Set up the labels for the iterator (output + combined labels).
     * Can just share the output_labels memory, because iter_labels
     * is output_labels with some more labels appended.
     */
    iter_labels = output_labels;
    ndim_iter = ndim_output;
    for (label = min_label; label <= max_label; ++label) {
        if (label_counts[label] > 0 &&
                memchr(output_labels, label, ndim_output) == NULL) {
            if (ndim_iter >= NPY_MAXDIMS) {
                PyErr_SetString(PyExc_ValueError,
                            "too many subscripts in einsum");
                goto fail;
            }
            iter_labels[ndim_iter++] = label;
        }
    }

    /* Set up the op_axes for the iterator */
    for (iop = 0; iop < nop; ++iop) {
        op_axes[iop] = op_axes_arrays[iop];

        if (!prepare_op_axes(PyArray_NDIM(op[iop]), iop, op_labels[iop],
                    op_axes[iop], ndim_iter, iter_labels, broadcast[iop])) {
            goto fail;
        }
    }

    /* Set up the op_dtypes if dtype was provided */
    if (dtype == NULL) {
        op_dtypes = NULL;
    }
    else {
        op_dtypes = op_dtypes_array;
        for (iop = 0; iop <= nop; ++iop) {
            op_dtypes[iop] = dtype;
        }
    }

    /* Set the op_axes for the output */
    op_axes[nop] = op_axes_arrays[nop];
    for (idim = 0; idim < ndim_output; ++idim) {
        op_axes[nop][idim] = idim;
    }
    for (idim = ndim_output; idim < ndim_iter; ++idim) {
        op_axes[nop][idim] = -1;
    }

    /* Set the iterator per-op flags */

    for (iop = 0; iop < nop; ++iop) {
        op_flags[iop] = NPY_ITER_READONLY|
                        NPY_ITER_NBO|
                        NPY_ITER_ALIGNED;
    }
    op_flags[nop] = NPY_ITER_READWRITE|
                    NPY_ITER_NBO|
                    NPY_ITER_ALIGNED|
                    NPY_ITER_ALLOCATE|
                    NPY_ITER_NO_BROADCAST;

    /* Allocate the iterator */
    iter = NpyIter_MultiNew(nop+1, op, NPY_ITER_NO_INNER_ITERATION|
                ((dtype == NULL) ? 0 : NPY_ITER_COMMON_DTYPE)|
                                       NPY_ITER_BUFFERED|
                                       NPY_ITER_DELAY_BUFALLOC|
                                       NPY_ITER_GROWINNER|
                                       NPY_ITER_REDUCE_OK,
                                       order, casting,
                                       op_flags, op_dtypes,
                                       ndim_iter, op_axes, 0);
    
    if (iter == NULL) {
        goto fail;
    }

    /* Initialize the output to all zeros */
    ret = NpyIter_GetOperandArray(iter)[nop];
    Py_INCREF(ret);
    PyArray_FillWithZero(ret);
    NpyIter_Reset(iter, NULL);

    NpyIter_DebugPrint(iter);
    NpyIter_Deallocate(iter);

    return ret;

fail:
    for (iop = 0; iop < nop; ++iop) {
        Py_XDECREF(op[iop]);
    }

    return NULL;
}
